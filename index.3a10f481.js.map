{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["class $a5fd07fa01589658$var$Game {\n    constructor(){\n        this.gridSize = 4;\n        this.grid = this.createEmptyGrid();\n        this.score = 0;\n    }\n    // Create an empty grid\n    createEmptyGrid() {\n        return Array.from({\n            length: this.gridSize\n        }, ()=>Array(this.gridSize).fill(null));\n    }\n    // Add a random tile to the grid\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.gridSize; row++){\n            for(let col = 0; col < this.gridSize; col++)if (this.grid[row][col] === null) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const { row: row, col: col } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.grid[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    // Check if the grid is full\n    isFull() {\n        for(let row = 0; row < this.gridSize; row++)for(let col = 0; col < this.gridSize; col++){\n            if (this.grid[row][col] === null) return false;\n        }\n        return true;\n    }\n    // Reset the game\n    reset() {\n        this.grid = this.createEmptyGrid();\n        this.score = 0;\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    // Move and merge tiles in the specified direction\n    move(direction) {\n        let moved = false;\n        const merged = [];\n        for(let i = 0; i < this.gridSize; i++)merged[i] = new Array(this.gridSize).fill(false);\n        const moveTile = (row, col, newRow, newCol)=>{\n            if (this.grid[newRow][newCol] === null) {\n                this.grid[newRow][newCol] = this.grid[row][col];\n                this.grid[row][col] = null;\n                moved = true;\n            } else if (this.grid[newRow][newCol] === this.grid[row][col] && !merged[newRow][newCol]) {\n                this.grid[newRow][newCol] *= 2;\n                this.score += this.grid[newRow][newCol];\n                this.grid[row][col] = null;\n                merged[newRow][newCol] = true;\n                moved = true;\n            }\n        };\n        const moveRow = (row)=>{\n            for(let col = 0; col < this.gridSize; col++)if (this.grid[row][col] !== null) {\n                let newCol = col;\n                while(newCol > 0){\n                    if (this.grid[row][newCol - 1] === null || this.grid[row][newCol - 1] === this.grid[row][newCol]) moveTile(row, newCol, row, newCol - 1);\n                    newCol--;\n                }\n            }\n        };\n        const moveColumn = (col)=>{\n            for(let row = 0; row < this.gridSize; row++)if (this.grid[row][col] !== null) {\n                let newRow = row;\n                while(newRow > 0){\n                    if (this.grid[newRow - 1][col] === null || this.grid[newRow - 1][col] === this.grid[newRow][col]) moveTile(newRow, col, newRow - 1, col);\n                    newRow--;\n                }\n            }\n        };\n        if (direction === \"up\") for(let col = 0; col < this.gridSize; col++)moveColumn(col);\n        else if (direction === \"down\") for(let col = 0; col < this.gridSize; col++){\n            for(let row = this.gridSize - 1; row >= 0; row--)if (this.grid[row][col] !== null) {\n                let newRow = row;\n                while(newRow < this.gridSize - 1){\n                    if (this.grid[newRow + 1][col] === null || this.grid[newRow + 1][col] === this.grid[newRow][col]) moveTile(newRow, col, newRow + 1, col);\n                    newRow++;\n                }\n            }\n        }\n        else if (direction === \"left\") for(let row = 0; row < this.gridSize; row++)moveRow(row);\n        else if (direction === \"right\") for(let row = 0; row < this.gridSize; row++){\n            for(let col = this.gridSize - 1; col >= 0; col--)if (this.grid[row][col] !== null) {\n                let newCol = col;\n                while(newCol < this.gridSize - 1){\n                    if (this.grid[row][newCol + 1] === null || this.grid[row][newCol + 1] === this.grid[row][newCol]) moveTile(row, newCol, row, newCol + 1);\n                    newCol++;\n                }\n            }\n        }\n        if (moved) this.addRandomTile();\n    }\n    // Check if the player has won the game\n    hasWon() {\n        for(let row = 0; row < this.gridSize; row++)for(let col = 0; col < this.gridSize; col++){\n            if (this.grid[row][col] === 2048) return true;\n        }\n        return false;\n    }\n    // Check if there are no more valid moves\n    isGameOver() {\n        if (!this.isFull()) return false;\n        for(let row = 0; row < this.gridSize; row++)for(let col = 0; col < this.gridSize; col++){\n            if (col < this.gridSize - 1 && this.grid[row][col] === this.grid[row][col + 1]) return false;\n            if (row < this.gridSize - 1 && this.grid[row][col] === this.grid[row + 1][col]) return false;\n        }\n        return true;\n    }\n    // Get the current grid state\n    getGrid() {\n        return this.grid;\n    }\n    // Get the current score\n    getScore() {\n        return this.score;\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$updateUI = ()=>{\n    const grid = $09e991522ca7e64e$var$game.getGrid();\n    for(let row = 0; row < grid.length; row++)for(let col = 0; col < grid[row].length; col++){\n        const cell = $09e991522ca7e64e$var$gameField.rows[row].cells[col];\n        const value = grid[row][col];\n        cell.textContent = value || \"\";\n        cell.className = \"field-cell\";\n        if (value) cell.classList.add(`field-cell--${value}`);\n    }\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n};\nconst $09e991522ca7e64e$var$checkGameState = ()=>{\n    if ($09e991522ca7e64e$var$game.hasWon()) {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        return true;\n    }\n    if ($09e991522ca7e64e$var$game.isGameOver()) {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        return true;\n    }\n    return false;\n};\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.reset();\n    $09e991522ca7e64e$var$updateUI();\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n});\ndocument.addEventListener(\"keydown\", (event)=>{\n    const key = event.key;\n    if (key === \"ArrowUp\") $09e991522ca7e64e$var$game.move(\"up\");\n    else if (key === \"ArrowDown\") $09e991522ca7e64e$var$game.move(\"down\");\n    else if (key === \"ArrowLeft\") $09e991522ca7e64e$var$game.move(\"left\");\n    else if (key === \"ArrowRight\") $09e991522ca7e64e$var$game.move(\"right\");\n    $09e991522ca7e64e$var$updateUI();\n    $09e991522ca7e64e$var$checkGameState();\n});\n\n\n//# sourceMappingURL=index.3a10f481.js.map\n","import Game from '../modules/Game.class';\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst updateUI = () => {\n  const grid = game.getGrid();\n\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[row].length; col++) {\n      const cell = gameField.rows[row].cells[col];\n      const value = grid[row][col];\n\n      cell.textContent = value || '';\n      cell.className = 'field-cell';\n\n      if (value) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    }\n  }\n  gameScore.textContent = game.getScore();\n};\n\nconst checkGameState = () => {\n  if (game.hasWon()) {\n    messageWin.classList.remove('hidden');\n\n    return true;\n  }\n\n  if (game.isGameOver()) {\n    messageLose.classList.remove('hidden');\n\n    return true;\n  }\n\n  return false;\n};\n\nstartButton.addEventListener('click', () => {\n  game.reset();\n  updateUI();\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n});\n\ndocument.addEventListener('keydown', (event) => {\n  const key = event.key;\n\n  if (key === 'ArrowUp') {\n    game.move('up');\n  } else if (key === 'ArrowDown') {\n    game.move('down');\n  } else if (key === 'ArrowLeft') {\n    game.move('left');\n  } else if (key === 'ArrowRight') {\n    game.move('right');\n  }\n\n  updateUI();\n  checkGameState();\n});\n","class Game {\n  constructor() {\n    this.gridSize = 4;\n    this.grid = this.createEmptyGrid();\n    this.score = 0;\n  }\n\n  // Create an empty grid\n  createEmptyGrid() {\n    return Array.from({ length: this.gridSize }, () =>\n      Array(this.gridSize).fill(null),\n    );\n  }\n\n  // Add a random tile to the grid\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.gridSize; row++) {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (this.grid[row][col] === null) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.grid[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  // Check if the grid is full\n  isFull() {\n    for (let row = 0; row < this.gridSize; row++) {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (this.grid[row][col] === null) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // Reset the game\n  reset() {\n    this.grid = this.createEmptyGrid();\n    this.score = 0;\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  // Move and merge tiles in the specified direction\n  move(direction) {\n    let moved = false;\n    const merged = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      merged[i] = new Array(this.gridSize).fill(false);\n    }\n\n    const moveTile = (row, col, newRow, newCol) => {\n      if (this.grid[newRow][newCol] === null) {\n        this.grid[newRow][newCol] = this.grid[row][col];\n        this.grid[row][col] = null;\n        moved = true;\n      } else if (\n        this.grid[newRow][newCol] === this.grid[row][col] &&\n        !merged[newRow][newCol]\n      ) {\n        this.grid[newRow][newCol] *= 2;\n        this.score += this.grid[newRow][newCol];\n        this.grid[row][col] = null;\n        merged[newRow][newCol] = true;\n        moved = true;\n      }\n    };\n\n    const moveRow = (row) => {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (this.grid[row][col] !== null) {\n          let newCol = col;\n\n          while (newCol > 0) {\n            if (\n              this.grid[row][newCol - 1] === null ||\n              this.grid[row][newCol - 1] === this.grid[row][newCol]\n            ) {\n              moveTile(row, newCol, row, newCol - 1);\n            }\n            newCol--;\n          }\n        }\n      }\n    };\n\n    const moveColumn = (col) => {\n      for (let row = 0; row < this.gridSize; row++) {\n        if (this.grid[row][col] !== null) {\n          let newRow = row;\n\n          while (newRow > 0) {\n            if (\n              this.grid[newRow - 1][col] === null ||\n              this.grid[newRow - 1][col] === this.grid[newRow][col]\n            ) {\n              moveTile(newRow, col, newRow - 1, col);\n            }\n            newRow--;\n          }\n        }\n      }\n    };\n\n    if (direction === 'up') {\n      for (let col = 0; col < this.gridSize; col++) {\n        moveColumn(col);\n      }\n    } else if (direction === 'down') {\n      for (let col = 0; col < this.gridSize; col++) {\n        for (let row = this.gridSize - 1; row >= 0; row--) {\n          if (this.grid[row][col] !== null) {\n            let newRow = row;\n\n            while (newRow < this.gridSize - 1) {\n              if (\n                this.grid[newRow + 1][col] === null ||\n                this.grid[newRow + 1][col] === this.grid[newRow][col]\n              ) {\n                moveTile(newRow, col, newRow + 1, col);\n              }\n              newRow++;\n            }\n          }\n        }\n      }\n    } else if (direction === 'left') {\n      for (let row = 0; row < this.gridSize; row++) {\n        moveRow(row);\n      }\n    } else if (direction === 'right') {\n      for (let row = 0; row < this.gridSize; row++) {\n        for (let col = this.gridSize - 1; col >= 0; col--) {\n          if (this.grid[row][col] !== null) {\n            let newCol = col;\n\n            while (newCol < this.gridSize - 1) {\n              if (\n                this.grid[row][newCol + 1] === null ||\n                this.grid[row][newCol + 1] === this.grid[row][newCol]\n              ) {\n                moveTile(row, newCol, row, newCol + 1);\n              }\n              newCol++;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  // Check if the player has won the game\n  hasWon() {\n    for (let row = 0; row < this.gridSize; row++) {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (this.grid[row][col] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  // Check if there are no more valid moves\n  isGameOver() {\n    if (!this.isFull()) {\n      return false;\n    }\n\n    for (let row = 0; row < this.gridSize; row++) {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (\n          col < this.gridSize - 1 &&\n          this.grid[row][col] === this.grid[row][col + 1]\n        ) {\n          return false;\n        }\n\n        if (\n          row < this.gridSize - 1 &&\n          this.grid[row][col] === this.grid[row + 1][col]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // Get the current grid state\n  getGrid() {\n    return this.grid;\n  }\n\n  // Get the current score\n  getScore() {\n    return this.score;\n  }\n}\n\nexport default Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","gridSize","grid","createEmptyGrid","score","Array","from","length","fill","addRandomTile","emptyCells","row","col","push","Math","floor","random","isFull","reset","move","direction","moved","merged","i","moveTile","newRow","newCol","moveRow","moveColumn","hasWon","isGameOver","getGrid","getScore","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$updateUI","cell","rows","cells","value","textContent","className","classList","add","$09e991522ca7e64e$var$checkGameState","remove","addEventListener","event","key"],"version":3,"file":"index.3a10f481.js.map"}