{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Game() {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.gridSize = 4;\n        this.grid = this.createEmptyGrid();\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            // Create an empty grid\n            key: \"createEmptyGrid\",\n            value: function createEmptyGrid() {\n                var _this = this;\n                return Array.from({\n                    length: this.gridSize\n                }, function() {\n                    return Array(_this.gridSize).fill(null);\n                });\n            }\n        },\n        {\n            // Add a random tile to the grid\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < this.gridSize; row++){\n                    for(var col = 0; col < this.gridSize; col++)if (this.grid[row][col] === null) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], row1 = _emptyCells_Math_floor.row, col1 = _emptyCells_Math_floor.col;\n                    this.grid[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            // Check if the grid is full\n            key: \"isFull\",\n            value: function isFull() {\n                for(var row = 0; row < this.gridSize; row++)for(var col = 0; col < this.gridSize; col++){\n                    if (this.grid[row][col] === null) return false;\n                }\n                return true;\n            }\n        },\n        {\n            // Reset the game\n            key: \"reset\",\n            value: function reset() {\n                this.grid = this.createEmptyGrid();\n                this.score = 0;\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            // Move and merge tiles in the specified direction\n            key: \"move\",\n            value: function move(direction) {\n                var _this = this;\n                var moved = false;\n                var merged = [];\n                for(var i = 0; i < this.gridSize; i++)merged[i] = new Array(this.gridSize).fill(false);\n                var moveTile = function(row, col, newRow, newCol) {\n                    if (_this.grid[newRow][newCol] === null) {\n                        _this.grid[newRow][newCol] = _this.grid[row][col];\n                        _this.grid[row][col] = null;\n                        moved = true;\n                    } else if (_this.grid[newRow][newCol] === _this.grid[row][col] && !merged[newRow][newCol]) {\n                        _this.grid[newRow][newCol] *= 2;\n                        _this.score += _this.grid[newRow][newCol];\n                        _this.grid[row][col] = null;\n                        merged[newRow][newCol] = true;\n                        moved = true;\n                    }\n                };\n                var moveRow = function(row) {\n                    for(var col = 0; col < _this.gridSize; col++)if (_this.grid[row][col] !== null) {\n                        var newCol = col;\n                        while(newCol > 0){\n                            if (_this.grid[row][newCol - 1] === null || _this.grid[row][newCol - 1] === _this.grid[row][newCol]) moveTile(row, newCol, row, newCol - 1);\n                            newCol--;\n                        }\n                    }\n                };\n                var moveColumn = function(col) {\n                    for(var row = 0; row < _this.gridSize; row++)if (_this.grid[row][col] !== null) {\n                        var newRow = row;\n                        while(newRow > 0){\n                            if (_this.grid[newRow - 1][col] === null || _this.grid[newRow - 1][col] === _this.grid[newRow][col]) moveTile(newRow, col, newRow - 1, col);\n                            newRow--;\n                        }\n                    }\n                };\n                if (direction === \"up\") for(var col = 0; col < this.gridSize; col++)moveColumn(col);\n                else if (direction === \"down\") for(var col1 = 0; col1 < this.gridSize; col1++){\n                    for(var row = this.gridSize - 1; row >= 0; row--)if (this.grid[row][col1] !== null) {\n                        var newRow = row;\n                        while(newRow < this.gridSize - 1){\n                            if (this.grid[newRow + 1][col1] === null || this.grid[newRow + 1][col1] === this.grid[newRow][col1]) moveTile(newRow, col1, newRow + 1, col1);\n                            newRow++;\n                        }\n                    }\n                }\n                else if (direction === \"left\") for(var row1 = 0; row1 < this.gridSize; row1++)moveRow(row1);\n                else if (direction === \"right\") for(var row2 = 0; row2 < this.gridSize; row2++){\n                    for(var col2 = this.gridSize - 1; col2 >= 0; col2--)if (this.grid[row2][col2] !== null) {\n                        var newCol = col2;\n                        while(newCol < this.gridSize - 1){\n                            if (this.grid[row2][newCol + 1] === null || this.grid[row2][newCol + 1] === this.grid[row2][newCol]) moveTile(row2, newCol, row2, newCol + 1);\n                            newCol++;\n                        }\n                    }\n                }\n                if (moved) this.addRandomTile();\n            }\n        },\n        {\n            // Check if the player has won the game\n            key: \"hasWon\",\n            value: function hasWon() {\n                for(var row = 0; row < this.gridSize; row++)for(var col = 0; col < this.gridSize; col++){\n                    if (this.grid[row][col] === 2048) return true;\n                }\n                return false;\n            }\n        },\n        {\n            // Check if there are no more valid moves\n            key: \"isGameOver\",\n            value: function isGameOver() {\n                if (!this.isFull()) return false;\n                for(var row = 0; row < this.gridSize; row++)for(var col = 0; col < this.gridSize; col++){\n                    if (col < this.gridSize - 1 && this.grid[row][col] === this.grid[row][col + 1]) return false;\n                    if (row < this.gridSize - 1 && this.grid[row][col] === this.grid[row + 1][col]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            // Get the current grid state\n            key: \"getGrid\",\n            value: function getGrid() {\n                return this.grid;\n            }\n        },\n        {\n            // Get the current score\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        }\n    ]);\n    return Game;\n}();\nvar $3d28d7f1aac198f5$export$2e2bcd8739ae039 = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039)();\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$gameField = document.querySelector(\".game-field\");\nvar $197cd56b15c33885$var$gameScore = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$updateUI = function() {\n    var grid = $197cd56b15c33885$var$game.getGrid();\n    for(var row = 0; row < grid.length; row++)for(var col = 0; col < grid[row].length; col++){\n        var cell = $197cd56b15c33885$var$gameField.rows[row].cells[col];\n        var value = grid[row][col];\n        cell.textContent = value || \"\";\n        cell.className = \"field-cell\";\n        if (value) cell.classList.add(\"field-cell--\".concat(value));\n    }\n    $197cd56b15c33885$var$gameScore.textContent = $197cd56b15c33885$var$game.getScore();\n};\nvar $197cd56b15c33885$var$checkGameState = function() {\n    if ($197cd56b15c33885$var$game.hasWon()) {\n        $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n        return true;\n    }\n    if ($197cd56b15c33885$var$game.isGameOver()) {\n        $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n        return true;\n    }\n    return false;\n};\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.reset();\n    $197cd56b15c33885$var$updateUI();\n    $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n    $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n});\ndocument.addEventListener(\"keydown\", function(event) {\n    var key = event.key;\n    if (key === \"ArrowUp\") $197cd56b15c33885$var$game.move(\"up\");\n    else if (key === \"ArrowDown\") $197cd56b15c33885$var$game.move(\"down\");\n    else if (key === \"ArrowLeft\") $197cd56b15c33885$var$game.move(\"left\");\n    else if (key === \"ArrowRight\") $197cd56b15c33885$var$game.move(\"right\");\n    $197cd56b15c33885$var$updateUI();\n    $197cd56b15c33885$var$checkGameState();\n});\n\n})();\n//# sourceMappingURL=index.66a057bd.js.map\n","import Game from '../modules/Game.class';\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst updateUI = () => {\n  const grid = game.getGrid();\n\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[row].length; col++) {\n      const cell = gameField.rows[row].cells[col];\n      const value = grid[row][col];\n\n      cell.textContent = value || '';\n      cell.className = 'field-cell';\n\n      if (value) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    }\n  }\n  gameScore.textContent = game.getScore();\n};\n\nconst checkGameState = () => {\n  if (game.hasWon()) {\n    messageWin.classList.remove('hidden');\n\n    return true;\n  }\n\n  if (game.isGameOver()) {\n    messageLose.classList.remove('hidden');\n\n    return true;\n  }\n\n  return false;\n};\n\nstartButton.addEventListener('click', () => {\n  game.reset();\n  updateUI();\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n});\n\ndocument.addEventListener('keydown', (event) => {\n  const key = event.key;\n\n  if (key === 'ArrowUp') {\n    game.move('up');\n  } else if (key === 'ArrowDown') {\n    game.move('down');\n  } else if (key === 'ArrowLeft') {\n    game.move('left');\n  } else if (key === 'ArrowRight') {\n    game.move('right');\n  }\n\n  updateUI();\n  checkGameState();\n});\n","class Game {\n  constructor() {\n    this.gridSize = 4;\n    this.grid = this.createEmptyGrid();\n    this.score = 0;\n  }\n\n  // Create an empty grid\n  createEmptyGrid() {\n    return Array.from({ length: this.gridSize }, () =>\n      Array(this.gridSize).fill(null),\n    );\n  }\n\n  // Add a random tile to the grid\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.gridSize; row++) {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (this.grid[row][col] === null) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.grid[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  // Check if the grid is full\n  isFull() {\n    for (let row = 0; row < this.gridSize; row++) {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (this.grid[row][col] === null) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // Reset the game\n  reset() {\n    this.grid = this.createEmptyGrid();\n    this.score = 0;\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  // Move and merge tiles in the specified direction\n  move(direction) {\n    let moved = false;\n    const merged = [];\n\n    for (let i = 0; i < this.gridSize; i++) {\n      merged[i] = new Array(this.gridSize).fill(false);\n    }\n\n    const moveTile = (row, col, newRow, newCol) => {\n      if (this.grid[newRow][newCol] === null) {\n        this.grid[newRow][newCol] = this.grid[row][col];\n        this.grid[row][col] = null;\n        moved = true;\n      } else if (\n        this.grid[newRow][newCol] === this.grid[row][col] &&\n        !merged[newRow][newCol]\n      ) {\n        this.grid[newRow][newCol] *= 2;\n        this.score += this.grid[newRow][newCol];\n        this.grid[row][col] = null;\n        merged[newRow][newCol] = true;\n        moved = true;\n      }\n    };\n\n    const moveRow = (row) => {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (this.grid[row][col] !== null) {\n          let newCol = col;\n\n          while (newCol > 0) {\n            if (\n              this.grid[row][newCol - 1] === null ||\n              this.grid[row][newCol - 1] === this.grid[row][newCol]\n            ) {\n              moveTile(row, newCol, row, newCol - 1);\n            }\n            newCol--;\n          }\n        }\n      }\n    };\n\n    const moveColumn = (col) => {\n      for (let row = 0; row < this.gridSize; row++) {\n        if (this.grid[row][col] !== null) {\n          let newRow = row;\n\n          while (newRow > 0) {\n            if (\n              this.grid[newRow - 1][col] === null ||\n              this.grid[newRow - 1][col] === this.grid[newRow][col]\n            ) {\n              moveTile(newRow, col, newRow - 1, col);\n            }\n            newRow--;\n          }\n        }\n      }\n    };\n\n    if (direction === 'up') {\n      for (let col = 0; col < this.gridSize; col++) {\n        moveColumn(col);\n      }\n    } else if (direction === 'down') {\n      for (let col = 0; col < this.gridSize; col++) {\n        for (let row = this.gridSize - 1; row >= 0; row--) {\n          if (this.grid[row][col] !== null) {\n            let newRow = row;\n\n            while (newRow < this.gridSize - 1) {\n              if (\n                this.grid[newRow + 1][col] === null ||\n                this.grid[newRow + 1][col] === this.grid[newRow][col]\n              ) {\n                moveTile(newRow, col, newRow + 1, col);\n              }\n              newRow++;\n            }\n          }\n        }\n      }\n    } else if (direction === 'left') {\n      for (let row = 0; row < this.gridSize; row++) {\n        moveRow(row);\n      }\n    } else if (direction === 'right') {\n      for (let row = 0; row < this.gridSize; row++) {\n        for (let col = this.gridSize - 1; col >= 0; col--) {\n          if (this.grid[row][col] !== null) {\n            let newCol = col;\n\n            while (newCol < this.gridSize - 1) {\n              if (\n                this.grid[row][newCol + 1] === null ||\n                this.grid[row][newCol + 1] === this.grid[row][newCol]\n              ) {\n                moveTile(row, newCol, row, newCol + 1);\n              }\n              newCol++;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n  }\n\n  // Check if the player has won the game\n  hasWon() {\n    for (let row = 0; row < this.gridSize; row++) {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (this.grid[row][col] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  // Check if there are no more valid moves\n  isGameOver() {\n    if (!this.isFull()) {\n      return false;\n    }\n\n    for (let row = 0; row < this.gridSize; row++) {\n      for (let col = 0; col < this.gridSize; col++) {\n        if (\n          col < this.gridSize - 1 &&\n          this.grid[row][col] === this.grid[row][col + 1]\n        ) {\n          return false;\n        }\n\n        if (\n          row < this.gridSize - 1 &&\n          this.grid[row][col] === this.grid[row + 1][col]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // Get the current grid state\n  getGrid() {\n    return this.grid;\n  }\n\n  // Get the current score\n  getScore() {\n    return this.score;\n  }\n}\n\nexport default Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$gameField","$197cd56b15c33885$var$gameScore","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$updateUI","protoProps","Game","instance","Constructor","TypeError","gridSize","grid","createEmptyGrid","score","key","value","_this","Array","from","length","fill","emptyCells","row","col","push","_emptyCells_Math_floor","Math","floor","random","row1","col1","addRandomTile","direction","moved","merged","i","moveTile","newRow","newCol","moveColumn","moveRow","row2","col2","isFull","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","document","querySelector","getGrid","cell","rows","cells","textContent","className","classList","add","concat","getScore","addEventListener","reset","event","move","hasWon","remove","isGameOver"],"version":3,"file":"index.66a057bd.js.map"}